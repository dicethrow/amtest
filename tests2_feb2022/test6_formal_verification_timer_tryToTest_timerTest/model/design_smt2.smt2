; SMT-LIBv2 description generated by Yosys 0.13+3 (git sha1 61324cf55, clang 10.0.0-4ubuntu1 -fPIC -Os)
; yosys-smt2-module delayer
(declare-sort |delayer_s| 0)
(declare-fun |delayer_is| (|delayer_s|) Bool)
(declare-fun |delayer#0| (|delayer_s|) Bool) ; \start
; yosys-smt2-input start 1
; yosys-smt2-wire start 1
(define-fun |delayer_n start| ((state |delayer_s|)) Bool (|delayer#0| state))
(declare-fun |delayer#1| (|delayer_s|) Bool) ; \rst
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |delayer_n rst| ((state |delayer_s|)) Bool (|delayer#1| state))
(declare-fun |delayer#2| (|delayer_s|) (_ BitVec 32)) ; \reload
; yosys-smt2-input reload 32
; yosys-smt2-wire reload 32
(define-fun |delayer_n reload| ((state |delayer_s|)) (_ BitVec 32) (|delayer#2| state))
(declare-fun |delayer#3| (|delayer_s|) (_ BitVec 2)) ; \fsm_state
; yosys-smt2-register fsm_state 2
; yosys-smt2-wire fsm_state 2
(define-fun |delayer_n fsm_state| ((state |delayer_s|)) (_ BitVec 2) (|delayer#3| state))
(define-fun |delayer#4| ((state |delayer_s|)) Bool (not (or  (= ((_ extract 0 0) (|delayer#3| state)) #b1) (= ((_ extract 1 1) (|delayer#3| state)) #b1)))) ; \done
; yosys-smt2-output done 1
; yosys-smt2-wire done 1
(define-fun |delayer_n done| ((state |delayer_s|)) Bool (|delayer#4| state))
(declare-fun |delayer#5| (|delayer_s|) (_ BitVec 32)) ; \counter_out
; yosys-smt2-output counter_out 32
; yosys-smt2-register counter_out 32
; yosys-smt2-wire counter_out 32
(define-fun |delayer_n counter_out| ((state |delayer_s|)) (_ BitVec 32) (|delayer#5| state))
(declare-fun |delayer#6| (|delayer_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
(define-fun |delayer_n clk| ((state |delayer_s|)) Bool (|delayer#6| state))
(define-fun |delayer#7| ((state |delayer_s|)) (_ BitVec 32) (bvsub (|delayer#2| state) #b00000000000000000000000000000001)) ; $15
(define-fun |delayer#8| ((state |delayer_s|)) Bool (bvugt (|delayer#2| state) #b00000000000000000000000000000000)) ; $13
(define-fun |delayer#9| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#8| state) (|delayer#7| state) #b00000000000000000000000000000000)) ; $procmux$30_Y
(define-fun |delayer#10| ((state |delayer_s|)) (_ BitVec 32) (bvsub (|delayer#5| state) #b00000000000000000000000000000001)) ; $10
(define-fun |delayer#11| ((state |delayer_s|)) Bool (bvugt (|delayer#5| state) #b00000000000000000000000000000000)) ; $18
(define-fun |delayer#12| ((state |delayer_s|)) (_ BitVec 1) (bvand (ite (|delayer#0| state) #b1 #b0) (ite (|delayer#11| state) #b1 #b0))) ; $20
(define-fun |delayer#13| ((state |delayer_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|delayer#12| state)) #b1) (|delayer#10| state) #b00000000000000000000000000000101)) ; $procmux$35_Y
(define-fun |delayer#14| ((state |delayer_s|)) Bool (= (|delayer#3| state) #b10)) ; $procmux$24_CMP
(define-fun |delayer#15| ((state |delayer_s|)) Bool (= (|delayer#3| state) #b01)) ; $procmux$27_CMP
(define-fun |delayer#16| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#15| state) (|delayer#13| state) (ite (|delayer#14| state) (|delayer#10| state) (ite (|delayer#4| state) (|delayer#9| state) #b00000000000000000000000000000000)))) ; $procmux$32_Y
(define-fun |delayer#17| ((state |delayer_s|)) Bool (or  (|delayer#4| state) (|delayer#14| state) (|delayer#15| state))) ; $auto$opt_dff.cc:197:make_patterns_logic$44
(define-fun |delayer#18| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#8| state) #b1 #b0) (ite (|delayer#4| state) #b1 #b0)) #b01)) ; $auto$opt_dff.cc:197:make_patterns_logic$56
(define-fun |delayer#19| ((state |delayer_s|)) Bool (and  (|delayer#17| state) (|delayer#18| state))) ; $auto$opt_dff.cc:222:make_patterns_logic$58
(define-fun |delayer#20| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#19| state) (|delayer#16| state) (|delayer#5| state))) ; $auto$rtlil.cc:2443:Mux$73
(define-fun |delayer#21| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#1| state) #b00000000000000000000000000000000 (|delayer#20| state))) ; $auto$rtlil.cc:2443:Mux$75
(define-fun |delayer#22| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#8| state) #b10 #b01)) ; $procmux$18_Y
(define-fun |delayer#23| ((state |delayer_s|)) Bool (= (|delayer#5| state) #b00000000000000000000000000000001)) ; $22
(define-fun |delayer#24| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#23| state) #b00 #b00)) ; $procmux$22_Y
(define-fun |delayer#25| ((state |delayer_s|)) (_ BitVec 2) (ite (= ((_ extract 0 0) (|delayer#12| state)) #b1) #b10 #b00)) ; $procmux$25_Y
(define-fun |delayer#26| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#15| state) (|delayer#25| state) (ite (|delayer#14| state) (|delayer#24| state) (ite (|delayer#4| state) (|delayer#22| state) #b00)))) ; $procmux$20_Y
(define-fun |delayer#27| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#15| state) #b1 #b0) (|delayer#12| state)) #b10)) ; $auto$opt_dff.cc:197:make_patterns_logic$46
(define-fun |delayer#28| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#14| state) #b1 #b0) (ite (|delayer#23| state) #b1 #b0)) #b10)) ; $auto$opt_dff.cc:197:make_patterns_logic$48
(define-fun |delayer#29| ((state |delayer_s|)) Bool (and  (|delayer#17| state) (|delayer#27| state) (|delayer#28| state))) ; $auto$opt_dff.cc:222:make_patterns_logic$50
(define-fun |delayer#30| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#29| state) (|delayer#26| state) (|delayer#3| state))) ; $auto$rtlil.cc:2443:Mux$77
(define-fun |delayer#31| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#1| state) #b01 (|delayer#30| state))) ; $auto$rtlil.cc:2443:Mux$79
(define-fun |delayer_a| ((state |delayer_s|)) Bool true)
(define-fun |delayer_u| ((state |delayer_s|)) Bool true)
(define-fun |delayer_i| ((state |delayer_s|)) Bool (and
  (= (|delayer#3| state) #b01) ; fsm_state
  (= (|delayer#5| state) #b00000000000000000000000000000000) ; counter_out
))
(define-fun |delayer_h| ((state |delayer_s|)) Bool true)
(define-fun |delayer_t| ((state |delayer_s|) (next_state |delayer_s|)) Bool (and
  (= (|delayer#21| state) (|delayer#5| next_state)) ; $auto$ff.cc:262:slice$53 \counter_out
  (= (|delayer#31| state) (|delayer#3| next_state)) ; $auto$ff.cc:262:slice$43 \fsm_state
)) ; end of module delayer
; yosys-smt2-module top
(declare-sort |top_s| 0)
(declare-fun |top_is| (|top_s|) Bool)
(declare-fun |top#0| (|top_s|) (_ BitVec 1)) ; \ui__start$1
; yosys-smt2-register ui__start$1 1
; yosys-smt2-wire ui__start$1 1
(define-fun |top_n ui__start$1| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#0| state)) #b1))
(declare-fun |top#1| (|top_s|) Bool) ; \ui__start
; yosys-smt2-input ui__start 1
; yosys-smt2-wire ui__start 1
(define-fun |top_n ui__start| ((state |top_s|)) Bool (|top#1| state))
(declare-fun |top#2| (|top_s|) (_ BitVec 1)) ; \ui__done$2
; yosys-smt2-register ui__done$2 1
; yosys-smt2-wire ui__done$2 1
(define-fun |top_n ui__done$2| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#2| state)) #b1))
(declare-fun |top#3| (|top_s|) Bool) ; \rst
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |top_n rst| ((state |top_s|)) Bool (|top#3| state))
(declare-fun |top#4| (|top_s|) (_ BitVec 32)) ; \reload
; yosys-smt2-input reload 32
; yosys-smt2-wire reload 32
(define-fun |top_n reload| ((state |top_s|)) (_ BitVec 32) (|top#4| state))
(declare-fun |top#5| (|top_s|) (_ BitVec 1)) ; \delayer_start
; yosys-smt2-register delayer_start 1
; yosys-smt2-wire delayer_start 1
(define-fun |top_n delayer_start| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#5| state)) #b1))
; yosys-smt2-cell delayer delayer
(declare-fun |top#6| (|top_s|) Bool) ; \delayer_done
(declare-fun |top#7| (|top_s|) (_ BitVec 32)) ; \delayer_counter_out
(declare-fun |top_h delayer| (|top_s|) |delayer_s|)
; yosys-smt2-wire delayer_done 1
(define-fun |top_n delayer_done| ((state |top_s|)) Bool (|top#6| state))
; yosys-smt2-wire delayer_counter_out 32
(define-fun |top_n delayer_counter_out| ((state |top_s|)) (_ BitVec 32) (|top#7| state))
(declare-fun |top#8| (|top_s|) (_ BitVec 32)) ; \debug__count$4
; yosys-smt2-register debug__count$4 32
; yosys-smt2-wire debug__count$4 32
(define-fun |top_n debug__count$4| ((state |top_s|)) (_ BitVec 32) (|top#8| state))
(declare-fun |top#9| (|top_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
(define-fun |top_n clk| ((state |top_s|)) Bool (|top#9| state))
(declare-fun |top#10| (|top_s|) (_ BitVec 1)) ; $assert$en
; yosys-smt2-register $assert$en 1
(define-fun |top_n $assert$en| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#10| state)) #b1))
(declare-fun |top#11| (|top_s|) (_ BitVec 1)) ; $assert$check
; yosys-smt2-register $assert$check 1
(define-fun |top_n $assert$check| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#11| state)) #b1))
; yosys-smt2-assert 0 test6_formal_verification_timer.py:71
(define-fun |top_a 0| ((state |top_s|)) Bool (or (= ((_ extract 0 0) (|top#11| state)) #b1) (not (= ((_ extract 0 0) (|top#10| state)) #b1)))) ; $11
(define-fun |top#12| ((state |top_s|)) Bool (not (or  (= ((_ extract 0 0) (|top#8| state)) #b1) (= ((_ extract 1 1) (|top#8| state)) #b1) (= ((_ extract 2 2) (|top#8| state)) #b1) (= ((_ extract 3 3) (|top#8| state)) #b1) (= ((_ extract 4 4) (|top#8| state)) #b1) (= ((_ extract 5 5) (|top#8| state)) #b1) (= ((_ extract 6 6) (|top#8| state)) #b1) (= ((_ extract 7 7) (|top#8| state)) #b1) (= ((_ extract 8 8) (|top#8| state)) #b1) (= ((_ extract 9 9) (|top#8| state)) #b1) (= ((_ extract 10 10) (|top#8| state)) #b1) (= ((_ extract 11 11) (|top#8| state)) #b1) (= ((_ extract 12 12) (|top#8| state)) #b1) (= ((_ extract 13 13) (|top#8| state)) #b1) (= ((_ extract 14 14) (|top#8| state)) #b1) (= ((_ extract 15 15) (|top#8| state)) #b1) (= ((_ extract 16 16) (|top#8| state)) #b1) (= ((_ extract 17 17) (|top#8| state)) #b1) (= ((_ extract 18 18) (|top#8| state)) #b1) (= ((_ extract 19 19) (|top#8| state)) #b1) (= ((_ extract 20 20) (|top#8| state)) #b1) (= ((_ extract 21 21) (|top#8| state)) #b1) (= ((_ extract 22 22) (|top#8| state)) #b1) (= ((_ extract 23 23) (|top#8| state)) #b1) (= ((_ extract 24 24) (|top#8| state)) #b1) (= ((_ extract 25 25) (|top#8| state)) #b1) (= ((_ extract 26 26) (|top#8| state)) #b1) (= ((_ extract 27 27) (|top#8| state)) #b1) (= ((_ extract 28 28) (|top#8| state)) #b1) (= ((_ extract 29 29) (|top#8| state)) #b1) (= ((_ extract 30 30) (|top#8| state)) #b1) (= ((_ extract 31 31) (|top#8| state)) #b1)))) ; $7
(define-fun |top#13| ((state |top_s|)) Bool (distinct (|top#2| state) (ite (|top#12| state) #b1 #b0))) ; $9
(define-fun |top#14| ((state |top_s|)) (_ BitVec 32) (ite (|top#3| state) #b00000000000000000000000000000000 (|top#7| state))) ; $auto$rtlil.cc:2443:Mux$71
(define-fun |top#15| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (|top#0| state))) ; $auto$rtlil.cc:2443:Mux$67
(define-fun |top#16| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (ite (|top#6| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$69
(define-fun |top#17| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (ite (|top#1| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$65
(define-fun |top_a| ((state |top_s|)) Bool (and
  (|top_a 0| state)
  (|delayer_a| (|top_h delayer| state))
))
(define-fun |top_u| ((state |top_s|)) Bool 
  (|delayer_u| (|top_h delayer| state))
)
(define-fun |top_i| ((state |top_s|)) Bool (and
  (= (= ((_ extract 0 0) (|top#0| state)) #b1) false) ; ui__start$1
  (= (= ((_ extract 0 0) (|top#2| state)) #b1) false) ; ui__done$2
  (= (= ((_ extract 0 0) (|top#5| state)) #b1) false) ; delayer_start
  (= (|top#8| state) #b00000000000000000000000000000000) ; debug__count$4
  (= (= ((_ extract 0 0) (|top#10| state)) #b1) false) ; $assert$en
  (= (= ((_ extract 0 0) (|top#11| state)) #b1) false) ; $assert$check
  (|delayer_i| (|top_h delayer| state))
))
(define-fun |top_h| ((state |top_s|)) Bool (and
  (= (|top_is| state) (|delayer_is| (|top_h delayer| state)))
  (= (= ((_ extract 0 0) (|top#5| state)) #b1) (|delayer_n start| (|top_h delayer| state))) ; delayer.start
  (= (|top#3| state) (|delayer_n rst| (|top_h delayer| state))) ; delayer.rst
  (= (|top#4| state) (|delayer_n reload| (|top_h delayer| state))) ; delayer.reload
  (= (|top#6| state) (|delayer_n done| (|top_h delayer| state))) ; delayer.done
  (= (|top#7| state) (|delayer_n counter_out| (|top_h delayer| state))) ; delayer.counter_out
  (= (|top#9| state) (|delayer_n clk| (|top_h delayer| state))) ; delayer.clk
  (|delayer_h| (|top_h delayer| state))
))
(define-fun |top_t| ((state |top_s|) (next_state |top_s|)) Bool (and
  (= (ite (|top#13| state) #b1 #b0) (|top#11| next_state)) ; $21 $assert$check
  (= #b1 (|top#10| next_state)) ; $20 $assert$en
  (= (|top#14| state) (|top#8| next_state)) ; $auto$ff.cc:262:slice$60 \debug__count$4
  (= (|top#15| state) (|top#5| next_state)) ; $auto$ff.cc:262:slice$62 \delayer_start
  (= (|top#16| state) (|top#2| next_state)) ; $auto$ff.cc:262:slice$61 \ui__done$2
  (= (|top#17| state) (|top#0| next_state)) ; $auto$ff.cc:262:slice$63 \ui__start$1
  (|delayer_t| (|top_h delayer| state) (|top_h delayer| next_state))
)) ; end of module top
; yosys-smt2-topmod top
; end of yosys output
