
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.13+3 (git sha1 61324cf55, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing RTLIL frontend.
Input filename: test1_amlib_timers_toplevel.il

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \adder

2.1.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \adder
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 5 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_4'.
     1/2: $cover$check
     2/2: $cover$en
Creating decoders for process `\top.$group_2'.
Creating decoders for process `\top.$group_0'.
Creating decoders for process `\adder.$group_0'.

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$group_4'.
Removing empty process `top.$group_4'.
Removing empty process `top.$group_2'.
Removing empty process `top.$group_0'.
Removing empty process `adder.$group_0'.
Cleaned up 1 empty switch.

2.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>
Optimizing module adder.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module adder.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module adder...
Checking module top...
Found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module top.

2.6.8. Rerunning OPT passes. (Maybe there is more to do..)

2.6.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.6.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..

2.6.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module top.

2.6.14. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 9) from port Y of cell adder.$3 ($add).
Removed top 3 bits (of 11) from port Y of cell top.$5 ($add).
Removed top 2 bits (of 10) from port A of cell top.$5 ($add).
Removed top 2 bits (of 10) from port Y of cell top.$3 ($mul).
Removed top 3 bits (of 11) from wire top.$1.
Removed top 2 bits (of 10) from wire top.$2.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.9. Executing MEMORY_COLLECT pass (generating $mem cells).

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..

2.10.4. Finished fast OPT passes.

2.11. Printing statistics.

=== adder ===

   Number of wires:                  3
   Number of wire bits:             24
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== top ===

   Number of wires:                 12
   Number of wire bits:             47
   Number of public wires:           3
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            1
     $and                            1
     $assert                         1
     $assume                         1
     $cover                          1
     $eq                             2
     $gt                             1
     $lt                             1
     $mul                            1
     $mux                            2
     adder                           1

=== design hierarchy ===

   top                               1
     adder                           1

   Number of wires:                 15
   Number of wire bits:             71
   Number of public wires:           6
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            2
     $and                            1
     $assert                         1
     $assume                         1
     $cover                          1
     $eq                             2
     $gt                             1
     $lt                             1
     $mul                            1
     $mux                            2

2.12. Executing CHECK pass (checking for obvious problems).
Checking module adder...
Checking module top...
Found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module top.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.3. Executing OPT_DFF pass (perform DFF optimizations).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \top..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
Checking module adder...
Checking module top...
Found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \adder

9.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \adder
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: f36398d800, CPU: user 0.03s system 0.00s, MEM: 7.27 MB peak
Yosys 0.13+3 (git sha1 61324cf55, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 27% 7x opt_expr (0 sec), 25% 7x opt_clean (0 sec), ...
