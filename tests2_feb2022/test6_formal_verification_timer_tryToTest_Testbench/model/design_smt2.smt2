; SMT-LIBv2 description generated by Yosys 0.13+3 (git sha1 61324cf55, clang 10.0.0-4ubuntu1 -fPIC -Os)
; yosys-smt2-module delayer
(declare-sort |delayer_s| 0)
(declare-fun |delayer_is| (|delayer_s|) Bool)
(declare-fun |delayer#0| (|delayer_s|) Bool) ; \sync_1e6_rst
; yosys-smt2-input sync_1e6_rst 1
; yosys-smt2-wire sync_1e6_rst 1
(define-fun |delayer_n sync_1e6_rst| ((state |delayer_s|)) Bool (|delayer#0| state))
(declare-fun |delayer#1| (|delayer_s|) Bool) ; \sync_1e6_clk
; yosys-smt2-input sync_1e6_clk 1
; yosys-smt2-wire sync_1e6_clk 1
; yosys-smt2-clock sync_1e6_clk posedge
(define-fun |delayer_n sync_1e6_clk| ((state |delayer_s|)) Bool (|delayer#1| state))
(declare-fun |delayer#2| (|delayer_s|) Bool) ; \start
; yosys-smt2-input start 1
; yosys-smt2-wire start 1
(define-fun |delayer_n start| ((state |delayer_s|)) Bool (|delayer#2| state))
(declare-fun |delayer#3| (|delayer_s|) (_ BitVec 32)) ; \reload
; yosys-smt2-input reload 32
; yosys-smt2-wire reload 32
(define-fun |delayer_n reload| ((state |delayer_s|)) (_ BitVec 32) (|delayer#3| state))
(declare-fun |delayer#4| (|delayer_s|) (_ BitVec 2)) ; \fsm_state
; yosys-smt2-register fsm_state 2
; yosys-smt2-wire fsm_state 2
(define-fun |delayer_n fsm_state| ((state |delayer_s|)) (_ BitVec 2) (|delayer#4| state))
(define-fun |delayer#5| ((state |delayer_s|)) Bool (not (or  (= ((_ extract 0 0) (|delayer#4| state)) #b1) (= ((_ extract 1 1) (|delayer#4| state)) #b1)))) ; \done
; yosys-smt2-output done 1
; yosys-smt2-wire done 1
(define-fun |delayer_n done| ((state |delayer_s|)) Bool (|delayer#5| state))
(declare-fun |delayer#6| (|delayer_s|) (_ BitVec 32)) ; \counter_out
; yosys-smt2-output counter_out 32
; yosys-smt2-register counter_out 32
; yosys-smt2-wire counter_out 32
(define-fun |delayer_n counter_out| ((state |delayer_s|)) (_ BitVec 32) (|delayer#6| state))
(define-fun |delayer#7| ((state |delayer_s|)) (_ BitVec 32) (bvsub (|delayer#3| state) #b00000000000000000000000000000001)) ; $15
(define-fun |delayer#8| ((state |delayer_s|)) Bool (bvugt (|delayer#3| state) #b00000000000000000000000000000000)) ; $13
(define-fun |delayer#9| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#8| state) (|delayer#7| state) #b00000000000000000000000000000000)) ; $procmux$44_Y
(define-fun |delayer#10| ((state |delayer_s|)) (_ BitVec 32) (bvsub (|delayer#6| state) #b00000000000000000000000000000001)) ; $10
(define-fun |delayer#11| ((state |delayer_s|)) Bool (bvugt (|delayer#6| state) #b00000000000000000000000000000000)) ; $18
(define-fun |delayer#12| ((state |delayer_s|)) (_ BitVec 1) (bvand (ite (|delayer#2| state) #b1 #b0) (ite (|delayer#11| state) #b1 #b0))) ; $20
(define-fun |delayer#13| ((state |delayer_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|delayer#12| state)) #b1) (|delayer#10| state) #b00000000000000000000000001100100)) ; $procmux$49_Y
(define-fun |delayer#14| ((state |delayer_s|)) Bool (= (|delayer#4| state) #b10)) ; $procmux$38_CMP
(define-fun |delayer#15| ((state |delayer_s|)) Bool (= (|delayer#4| state) #b01)) ; $procmux$41_CMP
(define-fun |delayer#16| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#15| state) (|delayer#13| state) (ite (|delayer#14| state) (|delayer#10| state) (ite (|delayer#5| state) (|delayer#9| state) #b00000000000000000000000000000000)))) ; $procmux$46_Y
(define-fun |delayer#17| ((state |delayer_s|)) Bool (or  (|delayer#5| state) (|delayer#14| state) (|delayer#15| state))) ; $auto$opt_dff.cc:197:make_patterns_logic$58
(define-fun |delayer#18| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#8| state) #b1 #b0) (ite (|delayer#5| state) #b1 #b0)) #b01)) ; $auto$opt_dff.cc:197:make_patterns_logic$70
(define-fun |delayer#19| ((state |delayer_s|)) Bool (and  (|delayer#17| state) (|delayer#18| state))) ; $auto$opt_dff.cc:222:make_patterns_logic$72
(define-fun |delayer#20| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#19| state) (|delayer#16| state) (|delayer#6| state))) ; $auto$rtlil.cc:2443:Mux$108
(define-fun |delayer#21| ((state |delayer_s|)) (_ BitVec 32) (ite (|delayer#0| state) #b00000000000000000000000000000000 (|delayer#20| state))) ; $auto$rtlil.cc:2443:Mux$110
(define-fun |delayer#22| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#8| state) #b10 #b01)) ; $procmux$32_Y
(define-fun |delayer#23| ((state |delayer_s|)) Bool (= (|delayer#6| state) #b00000000000000000000000000000001)) ; $22
(define-fun |delayer#24| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#23| state) #b00 #b00)) ; $procmux$36_Y
(define-fun |delayer#25| ((state |delayer_s|)) (_ BitVec 2) (ite (= ((_ extract 0 0) (|delayer#12| state)) #b1) #b10 #b00)) ; $procmux$39_Y
(define-fun |delayer#26| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#15| state) (|delayer#25| state) (ite (|delayer#14| state) (|delayer#24| state) (ite (|delayer#5| state) (|delayer#22| state) #b00)))) ; $procmux$34_Y
(define-fun |delayer#27| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#15| state) #b1 #b0) (|delayer#12| state)) #b10)) ; $auto$opt_dff.cc:197:make_patterns_logic$60
(define-fun |delayer#28| ((state |delayer_s|)) Bool (distinct (concat (ite (|delayer#14| state) #b1 #b0) (ite (|delayer#23| state) #b1 #b0)) #b10)) ; $auto$opt_dff.cc:197:make_patterns_logic$62
(define-fun |delayer#29| ((state |delayer_s|)) Bool (and  (|delayer#17| state) (|delayer#27| state) (|delayer#28| state))) ; $auto$opt_dff.cc:222:make_patterns_logic$64
(define-fun |delayer#30| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#29| state) (|delayer#26| state) (|delayer#4| state))) ; $auto$rtlil.cc:2443:Mux$112
(define-fun |delayer#31| ((state |delayer_s|)) (_ BitVec 2) (ite (|delayer#0| state) #b01 (|delayer#30| state))) ; $auto$rtlil.cc:2443:Mux$114
(define-fun |delayer_a| ((state |delayer_s|)) Bool true)
(define-fun |delayer_u| ((state |delayer_s|)) Bool true)
(define-fun |delayer_i| ((state |delayer_s|)) Bool (and
  (= (|delayer#4| state) #b01) ; fsm_state
  (= (|delayer#6| state) #b00000000000000000000000000000000) ; counter_out
))
(define-fun |delayer_h| ((state |delayer_s|)) Bool true)
(define-fun |delayer_t| ((state |delayer_s|) (next_state |delayer_s|)) Bool (and
  (= (|delayer#21| state) (|delayer#6| next_state)) ; $auto$ff.cc:262:slice$67 \counter_out
  (= (|delayer#31| state) (|delayer#4| next_state)) ; $auto$ff.cc:262:slice$57 \fsm_state
)) ; end of module delayer
; yosys-smt2-module dut
(declare-sort |dut_s| 0)
(declare-fun |dut_is| (|dut_s|) Bool)
(declare-fun |dut#0| (|dut_s|) (_ BitVec 1)) ; \ui__start$1
; yosys-smt2-register ui__start$1 1
; yosys-smt2-wire ui__start$1 1
(define-fun |dut_n ui__start$1| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#0| state)) #b1))
(declare-fun |dut#1| (|dut_s|) Bool) ; \ui__start
; yosys-smt2-input ui__start 1
; yosys-smt2-wire ui__start 1
(define-fun |dut_n ui__start| ((state |dut_s|)) Bool (|dut#1| state))
(declare-fun |dut#2| (|dut_s|) (_ BitVec 1)) ; \ui__done$2
; yosys-smt2-register ui__done$2 1
; yosys-smt2-wire ui__done$2 1
(define-fun |dut_n ui__done$2| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#2| state)) #b1))
(declare-fun |dut#3| (|dut_s|) (_ BitVec 1)) ; \ui__done
; yosys-smt2-output ui__done 1
; yosys-smt2-register ui__done 1
; yosys-smt2-wire ui__done 1
(define-fun |dut_n ui__done| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#3| state)) #b1))
(declare-fun |dut#4| (|dut_s|) (_ BitVec 1)) ; \ui__active$3
; yosys-smt2-register ui__active$3 1
; yosys-smt2-wire ui__active$3 1
(define-fun |dut_n ui__active$3| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#4| state)) #b1))
(declare-fun |dut#5| (|dut_s|) (_ BitVec 1)) ; \ui__active
; yosys-smt2-output ui__active 1
; yosys-smt2-register ui__active 1
; yosys-smt2-wire ui__active 1
(define-fun |dut_n ui__active| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#5| state)) #b1))
(declare-fun |dut#6| (|dut_s|) Bool) ; \sync_1e6_rst
; yosys-smt2-input sync_1e6_rst 1
; yosys-smt2-wire sync_1e6_rst 1
(define-fun |dut_n sync_1e6_rst| ((state |dut_s|)) Bool (|dut#6| state))
(declare-fun |dut#7| (|dut_s|) Bool) ; \sync_1e6_clk
; yosys-smt2-input sync_1e6_clk 1
; yosys-smt2-wire sync_1e6_clk 1
; yosys-smt2-clock sync_1e6_clk posedge
(define-fun |dut_n sync_1e6_clk| ((state |dut_s|)) Bool (|dut#7| state))
(declare-fun |dut#8| (|dut_s|) (_ BitVec 32)) ; \reload
; yosys-smt2-input reload 32
; yosys-smt2-wire reload 32
(define-fun |dut_n reload| ((state |dut_s|)) (_ BitVec 32) (|dut#8| state))
(declare-fun |dut#9| (|dut_s|) (_ BitVec 1)) ; \delayer_start
; yosys-smt2-register delayer_start 1
; yosys-smt2-wire delayer_start 1
(define-fun |dut_n delayer_start| ((state |dut_s|)) Bool (= ((_ extract 0 0) (|dut#9| state)) #b1))
; yosys-smt2-cell delayer delayer
(declare-fun |dut#10| (|dut_s|) Bool) ; \delayer_done
(declare-fun |dut#11| (|dut_s|) (_ BitVec 32)) ; \delayer_counter_out
(declare-fun |dut_h delayer| (|dut_s|) |delayer_s|)
; yosys-smt2-wire delayer_done 1
(define-fun |dut_n delayer_done| ((state |dut_s|)) Bool (|dut#10| state))
; yosys-smt2-wire delayer_counter_out 32
(define-fun |dut_n delayer_counter_out| ((state |dut_s|)) (_ BitVec 32) (|dut#11| state))
(declare-fun |dut#12| (|dut_s|) (_ BitVec 32)) ; \debug__count$4
; yosys-smt2-register debug__count$4 32
; yosys-smt2-wire debug__count$4 32
(define-fun |dut_n debug__count$4| ((state |dut_s|)) (_ BitVec 32) (|dut#12| state))
(declare-fun |dut#13| (|dut_s|) (_ BitVec 32)) ; \debug__count
; yosys-smt2-output debug__count 32
; yosys-smt2-register debug__count 32
; yosys-smt2-wire debug__count 32
(define-fun |dut_n debug__count| ((state |dut_s|)) (_ BitVec 32) (|dut#13| state))
(define-fun |dut#14| ((state |dut_s|)) (_ BitVec 32) (ite (|dut#6| state) #b00000000000000000000000000000000 (|dut#12| state))) ; $auto$rtlil.cc:2443:Mux$92
(define-fun |dut#15| ((state |dut_s|)) (_ BitVec 32) (ite (|dut#6| state) #b00000000000000000000000000000000 (|dut#11| state))) ; $auto$rtlil.cc:2443:Mux$98
(define-fun |dut#16| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (|dut#0| state))) ; $auto$rtlil.cc:2443:Mux$94
(define-fun |dut#17| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (|dut#4| state))) ; $auto$rtlil.cc:2443:Mux$106
(define-fun |dut#18| ((state |dut_s|)) Bool (distinct (|dut#11| state) #b00000000000000000000000001100100)) ; $5
(define-fun |dut#19| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (ite (|dut#18| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$100
(define-fun |dut#20| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (|dut#2| state))) ; $auto$rtlil.cc:2443:Mux$104
(define-fun |dut#21| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (ite (|dut#10| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$96
(define-fun |dut#22| ((state |dut_s|)) (_ BitVec 1) (ite (|dut#6| state) #b0 (ite (|dut#1| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$102
(define-fun |dut_a| ((state |dut_s|)) Bool 
  (|delayer_a| (|dut_h delayer| state))
)
(define-fun |dut_u| ((state |dut_s|)) Bool 
  (|delayer_u| (|dut_h delayer| state))
)
(define-fun |dut_i| ((state |dut_s|)) Bool (and
  (= (= ((_ extract 0 0) (|dut#0| state)) #b1) false) ; ui__start$1
  (= (= ((_ extract 0 0) (|dut#2| state)) #b1) false) ; ui__done$2
  (= (= ((_ extract 0 0) (|dut#3| state)) #b1) false) ; ui__done
  (= (= ((_ extract 0 0) (|dut#4| state)) #b1) false) ; ui__active$3
  (= (= ((_ extract 0 0) (|dut#5| state)) #b1) false) ; ui__active
  (= (= ((_ extract 0 0) (|dut#9| state)) #b1) false) ; delayer_start
  (= (|dut#12| state) #b00000000000000000000000000000000) ; debug__count$4
  (= (|dut#13| state) #b00000000000000000000000000000000) ; debug__count
  (|delayer_i| (|dut_h delayer| state))
))
(define-fun |dut_h| ((state |dut_s|)) Bool (and
  (= (|dut_is| state) (|delayer_is| (|dut_h delayer| state)))
  (= (|dut#6| state) (|delayer_n sync_1e6_rst| (|dut_h delayer| state))) ; delayer.sync_1e6_rst
  (= (|dut#7| state) (|delayer_n sync_1e6_clk| (|dut_h delayer| state))) ; delayer.sync_1e6_clk
  (= (= ((_ extract 0 0) (|dut#9| state)) #b1) (|delayer_n start| (|dut_h delayer| state))) ; delayer.start
  (= (|dut#8| state) (|delayer_n reload| (|dut_h delayer| state))) ; delayer.reload
  (= (|dut#10| state) (|delayer_n done| (|dut_h delayer| state))) ; delayer.done
  (= (|dut#11| state) (|delayer_n counter_out| (|dut_h delayer| state))) ; delayer.counter_out
  (|delayer_h| (|dut_h delayer| state))
))
(define-fun |dut_t| ((state |dut_s|) (next_state |dut_s|)) Bool (and
  (= (|dut#14| state) (|dut#13| next_state)) ; $auto$ff.cc:262:slice$81 \debug__count
  (= (|dut#15| state) (|dut#12| next_state)) ; $auto$ff.cc:262:slice$78 \debug__count$4
  (= (|dut#16| state) (|dut#9| next_state)) ; $auto$ff.cc:262:slice$80 \delayer_start
  (= (|dut#17| state) (|dut#5| next_state)) ; $auto$ff.cc:262:slice$74 \ui__active
  (= (|dut#19| state) (|dut#4| next_state)) ; $auto$ff.cc:262:slice$77 \ui__active$3
  (= (|dut#20| state) (|dut#3| next_state)) ; $auto$ff.cc:262:slice$75 \ui__done
  (= (|dut#21| state) (|dut#2| next_state)) ; $auto$ff.cc:262:slice$79 \ui__done$2
  (= (|dut#22| state) (|dut#0| next_state)) ; $auto$ff.cc:262:slice$76 \ui__start$1
  (|delayer_t| (|dut_h delayer| state) (|dut_h delayer| next_state))
)) ; end of module dut
; yosys-smt2-module top
(declare-sort |top_s| 0)
(declare-fun |top_is| (|top_s|) Bool)
(declare-fun |top#0| (|top_s|) (_ BitVec 1)) ; \ui__start$1
; yosys-smt2-register ui__start$1 1
; yosys-smt2-wire ui__start$1 1
(define-fun |top_n ui__start$1| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#0| state)) #b1))
(declare-fun |top#1| (|top_s|) Bool) ; \ui__start
; yosys-smt2-input ui__start 1
; yosys-smt2-wire ui__start 1
(define-fun |top_n ui__start| ((state |top_s|)) Bool (|top#1| state))
(declare-fun |top#2| (|top_s|) (_ BitVec 1)) ; \ui__done$2
; yosys-smt2-register ui__done$2 1
; yosys-smt2-wire ui__done$2 1
(define-fun |top_n ui__done$2| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#2| state)) #b1))
(declare-fun |top#3| (|top_s|) Bool) ; \sync_1e6_rst
; yosys-smt2-input sync_1e6_rst 1
; yosys-smt2-wire sync_1e6_rst 1
(define-fun |top_n sync_1e6_rst| ((state |top_s|)) Bool (|top#3| state))
(declare-fun |top#4| (|top_s|) Bool) ; \sync_1e6_clk
; yosys-smt2-input sync_1e6_clk 1
; yosys-smt2-wire sync_1e6_clk 1
; yosys-smt2-clock sync_1e6_clk posedge
(define-fun |top_n sync_1e6_clk| ((state |top_s|)) Bool (|top#4| state))
(declare-fun |top#5| (|top_s|) (_ BitVec 32)) ; \reload
; yosys-smt2-input reload 32
; yosys-smt2-wire reload 32
(define-fun |top_n reload| ((state |top_s|)) (_ BitVec 32) (|top#5| state))
(declare-fun |top#6| (|top_s|) (_ BitVec 1)) ; \dut_ui__start
; yosys-smt2-register dut_ui__start 1
; yosys-smt2-wire dut_ui__start 1
(define-fun |top_n dut_ui__start| ((state |top_s|)) Bool (= ((_ extract 0 0) (|top#6| state)) #b1))
; yosys-smt2-cell dut dut
(declare-fun |top#7| (|top_s|) Bool) ; \dut_ui__done
(declare-fun |top#8| (|top_s|) Bool) ; \dut_ui__active
(declare-fun |top#9| (|top_s|) (_ BitVec 32)) ; \dut_debug__count
(declare-fun |top_h dut| (|top_s|) |dut_s|)
; yosys-smt2-wire dut_ui__done 1
(define-fun |top_n dut_ui__done| ((state |top_s|)) Bool (|top#7| state))
; yosys-smt2-wire dut_ui__active 1
(define-fun |top_n dut_ui__active| ((state |top_s|)) Bool (|top#8| state))
; yosys-smt2-wire dut_debug__count 32
(define-fun |top_n dut_debug__count| ((state |top_s|)) (_ BitVec 32) (|top#9| state))
; yosys-smt2-cover 0 test6_formal_verification_timer.py:125
(define-fun |top_c 0| ((state |top_s|)) Bool (and (= ((_ extract 0 0) (|top#2| state)) #b1) true)) ; $4
(define-fun |top#10| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (|top#0| state))) ; $auto$rtlil.cc:2443:Mux$88
(define-fun |top#11| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (ite (|top#7| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$90
(define-fun |top#12| ((state |top_s|)) (_ BitVec 1) (ite (|top#3| state) #b0 (ite (|top#1| state) #b1 #b0))) ; $auto$rtlil.cc:2443:Mux$86
(define-fun |top_a| ((state |top_s|)) Bool 
  (|dut_a| (|top_h dut| state))
)
(define-fun |top_u| ((state |top_s|)) Bool 
  (|dut_u| (|top_h dut| state))
)
(define-fun |top_i| ((state |top_s|)) Bool (and
  (= (= ((_ extract 0 0) (|top#0| state)) #b1) false) ; ui__start$1
  (= (= ((_ extract 0 0) (|top#2| state)) #b1) false) ; ui__done$2
  (= (= ((_ extract 0 0) (|top#6| state)) #b1) false) ; dut_ui__start
  (|dut_i| (|top_h dut| state))
))
(define-fun |top_h| ((state |top_s|)) Bool (and
  (= (|top_is| state) (|dut_is| (|top_h dut| state)))
  (= (= ((_ extract 0 0) (|top#6| state)) #b1) (|dut_n ui__start| (|top_h dut| state))) ; dut.ui__start
  (= (|top#7| state) (|dut_n ui__done| (|top_h dut| state))) ; dut.ui__done
  (= (|top#8| state) (|dut_n ui__active| (|top_h dut| state))) ; dut.ui__active
  (= (|top#3| state) (|dut_n sync_1e6_rst| (|top_h dut| state))) ; dut.sync_1e6_rst
  (= (|top#4| state) (|dut_n sync_1e6_clk| (|top_h dut| state))) ; dut.sync_1e6_clk
  (= (|top#5| state) (|dut_n reload| (|top_h dut| state))) ; dut.reload
  (= (|top#9| state) (|dut_n debug__count| (|top_h dut| state))) ; dut.debug__count
  (|dut_h| (|top_h dut| state))
))
(define-fun |top_t| ((state |top_s|) (next_state |top_s|)) Bool (and
  (= (|top#10| state) (|top#6| next_state)) ; $auto$ff.cc:262:slice$83 \dut_ui__start
  (= (|top#11| state) (|top#2| next_state)) ; $auto$ff.cc:262:slice$82 \ui__done$2
  (= (|top#12| state) (|top#0| next_state)) ; $auto$ff.cc:262:slice$84 \ui__start$1
  (|dut_t| (|top_h dut| state) (|top_h dut| next_state))
)) ; end of module top
; yosys-smt2-topmod top
; end of yosys output
